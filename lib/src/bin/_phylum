#compdef phylum

autoload -U is-at-least

_phylum() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-c+[Sets a custom config file]' \
'--config=[Sets a custom config file]' \
'-t+[Set the timeout (in seconds) for requests to the Phylum api]' \
'--timeout=[Set the timeout (in seconds) for requests to the Phylum api]' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
":: :_phylum_commands" \
"*::: :->phylum" \
&& ret=0
    case $state in
    (phylum)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:phylum-command-$line[1]:"
        case $line[1] in
            (update)
_arguments "${_arguments_options[@]}" \
'-p[Update to the latest prerelease (vs. stable, default: false)]' \
'--prerelease[Update to the latest prerelease (vs. stable, default: false)]' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
&& ret=0
;;
(history)
_arguments "${_arguments_options[@]}" \
'--filter=[Provide a filter used to limit the issues displayed

EXAMPLES
# Show only issues with severity of at least '\''high'\''
	--filter=high

# Show issues with severity of '\''critical'\'' in the '\''author'\'' and '\''engineering'\'' domains
	--filter=crit,aut,eng
]' \
'-v[Increase verbosity of api response.]' \
'--verbose[Increase verbosity of api response.]' \
'-j[Produce output in json format (default: false)]' \
'--json[Produce output in json format (default: false)]' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'::JOB_ID -- The job id to query (or `current` for the most recent job):' \
":: :_phylum__history_commands" \
"*::: :->history" \
&& ret=0
case $state in
    (history)
        words=($line[2] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:phylum-history-command-$line[2]:"
        case $line[2] in
            (project)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
'::project_name:' \
'::job_id:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(projects)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
":: :_phylum__projects_commands" \
"*::: :->projects" \
&& ret=0
case $state in
    (projects)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:phylum-projects-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
':name:' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
&& ret=0
;;
(link)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
':name:' \
&& ret=0
;;
(set-thresholds)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
'::name:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(package)
_arguments "${_arguments_options[@]}" \
'-t+[The type of the package ("npm", "ruby", "pypi", etc.)]' \
'--package-type=[The type of the package ("npm", "ruby", "pypi", etc.)]' \
'-j[Produce output in json format (default: false)]' \
'--json[Produce output in json format (default: false)]' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'::name -- The name of the package.:' \
'::version -- The version of the package.:' \
&& ret=0
;;
(auth)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
":: :_phylum__auth_commands" \
"*::: :->auth" \
&& ret=0
case $state in
    (auth)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:phylum-auth-command-$line[1]:"
        case $line[1] in
            (register)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
&& ret=0
;;
(login)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
&& ret=0
;;
(keys)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
":: :_phylum__auth__keys_commands" \
"*::: :->keys" \
&& ret=0
case $state in
    (keys)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:phylum-auth-keys-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
&& ret=0
;;
(remove)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
':key_id:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(status)
_arguments "${_arguments_options[@]}" \
'--help[Print help information]' \
'--version[Print version information]' \
&& ret=0
;;
        esac
    ;;
esac
;;
(ping)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
&& ret=0
;;
(analyze)
_arguments "${_arguments_options[@]}" \
'-l+[]' \
'--filter=[Provide a filter used to limit the issues displayed

EXAMPLES
# Show only issues with severity of at least '\''high'\''
	--filter=high

# Show issues with severity of '\''critical'\'' in the '\''author'\'' and '\''engineering'\'' domains
	--filter=crit,aut,eng
]' \
'-v[Increase verbosity of api response.]' \
'--verbose[Increase verbosity of api response.]' \
'-j[Produce output in json format (default: false)]' \
'--json[Produce output in json format (default: false)]' \
'-F[Force re-processing of packages (even if they already exist in the system)]' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
'::LOCKFILE -- The package lock file to submit.:' \
&& ret=0
;;
(batch)
_arguments "${_arguments_options[@]}" \
'-f+[File (or piped stdin) containing the list of packages (format `<name>:<version>`)]' \
'-t+[Package type (`npm`, `ruby`, etc)]' \
'-l+[]' \
'-F[Force re-processing of packages (even if they already exist in the system)]' \
'-L[]' \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
&& ret=0
;;
(version)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_phylum_commands] )) ||
_phylum_commands() {
    local commands; commands=(
'update:Check for a new release of the Phylum CLI tool and update if one exists' \
'history:Return information about historical scans' \
'projects:Create, list, link and set thresholds for projects' \
'package:Retrieve the details of a specific packge' \
'auth:Manage authentication, registration, and API keys' \
'ping:Ping the remote system to verify it is available' \
'analyze:Submit a request for analysis to the processing system' \
'batch:Submits a batch of requests to the processing system' \
'version:Display application version' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'phylum commands' commands "$@"
}
(( $+functions[_phylum__analyze_commands] )) ||
_phylum__analyze_commands() {
    local commands; commands=()
    _describe -t commands 'phylum analyze commands' commands "$@"
}
(( $+functions[_phylum__auth_commands] )) ||
_phylum__auth_commands() {
    local commands; commands=(
'register:Register a new account' \
'login:Login to an existing account' \
'keys:Manage API keys' \
'status:Return the current authentication status' \
    )
    _describe -t commands 'phylum auth commands' commands "$@"
}
(( $+functions[_phylum__batch_commands] )) ||
_phylum__batch_commands() {
    local commands; commands=()
    _describe -t commands 'phylum batch commands' commands "$@"
}
(( $+functions[_phylum__auth__keys__create_commands] )) ||
_phylum__auth__keys__create_commands() {
    local commands; commands=()
    _describe -t commands 'phylum auth keys create commands' commands "$@"
}
(( $+functions[_phylum__projects__create_commands] )) ||
_phylum__projects__create_commands() {
    local commands; commands=()
    _describe -t commands 'phylum projects create commands' commands "$@"
}
(( $+functions[_phylum__help_commands] )) ||
_phylum__help_commands() {
    local commands; commands=()
    _describe -t commands 'phylum help commands' commands "$@"
}
(( $+functions[_phylum__history_commands] )) ||
_phylum__history_commands() {
    local commands; commands=(
'project:Shows a list of projects associated with the user' \
    )
    _describe -t commands 'phylum history commands' commands "$@"
}
(( $+functions[_phylum__auth__keys_commands] )) ||
_phylum__auth__keys_commands() {
    local commands; commands=(
'create:Create a new API key' \
'list:List current API keys' \
'remove:Deactivate an API key' \
    )
    _describe -t commands 'phylum auth keys commands' commands "$@"
}
(( $+functions[_phylum__projects__link_commands] )) ||
_phylum__projects__link_commands() {
    local commands; commands=()
    _describe -t commands 'phylum projects link commands' commands "$@"
}
(( $+functions[_phylum__auth__keys__list_commands] )) ||
_phylum__auth__keys__list_commands() {
    local commands; commands=()
    _describe -t commands 'phylum auth keys list commands' commands "$@"
}
(( $+functions[_phylum__projects__list_commands] )) ||
_phylum__projects__list_commands() {
    local commands; commands=()
    _describe -t commands 'phylum projects list commands' commands "$@"
}
(( $+functions[_phylum__auth__login_commands] )) ||
_phylum__auth__login_commands() {
    local commands; commands=()
    _describe -t commands 'phylum auth login commands' commands "$@"
}
(( $+functions[_phylum__package_commands] )) ||
_phylum__package_commands() {
    local commands; commands=()
    _describe -t commands 'phylum package commands' commands "$@"
}
(( $+functions[_phylum__ping_commands] )) ||
_phylum__ping_commands() {
    local commands; commands=()
    _describe -t commands 'phylum ping commands' commands "$@"
}
(( $+functions[_phylum__history__project_commands] )) ||
_phylum__history__project_commands() {
    local commands; commands=()
    _describe -t commands 'phylum history project commands' commands "$@"
}
(( $+functions[_phylum__projects_commands] )) ||
_phylum__projects_commands() {
    local commands; commands=(
'create:Create a new project' \
'list:List all existing projects' \
'link:Link a repository to a project' \
'set-thresholds:Set risk domain thresholds for a projects' \
    )
    _describe -t commands 'phylum projects commands' commands "$@"
}
(( $+functions[_phylum__auth__register_commands] )) ||
_phylum__auth__register_commands() {
    local commands; commands=()
    _describe -t commands 'phylum auth register commands' commands "$@"
}
(( $+functions[_phylum__auth__keys__remove_commands] )) ||
_phylum__auth__keys__remove_commands() {
    local commands; commands=()
    _describe -t commands 'phylum auth keys remove commands' commands "$@"
}
(( $+functions[_phylum__projects__set-thresholds_commands] )) ||
_phylum__projects__set-thresholds_commands() {
    local commands; commands=()
    _describe -t commands 'phylum projects set-thresholds commands' commands "$@"
}
(( $+functions[_phylum__auth__status_commands] )) ||
_phylum__auth__status_commands() {
    local commands; commands=()
    _describe -t commands 'phylum auth status commands' commands "$@"
}
(( $+functions[_phylum__update_commands] )) ||
_phylum__update_commands() {
    local commands; commands=()
    _describe -t commands 'phylum update commands' commands "$@"
}
(( $+functions[_phylum__version_commands] )) ||
_phylum__version_commands() {
    local commands; commands=()
    _describe -t commands 'phylum version commands' commands "$@"
}

_phylum "$@"