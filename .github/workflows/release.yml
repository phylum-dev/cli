# This is the workflow for building release artifacts.
# Optionally, creating a release with those artifacts is possible by pushing a tag.
---
name: Release

on:
  # Allow running this workflow manually from the Actions tab
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  Generate-Completion-Files:
    name: Generate shell completion files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@master

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Generate shell completion files
        uses: actions-rs/cargo@v1
        with:
          command: xtask
          args: gencomp

      - name: Upload shell completions
        uses: actions/upload-artifact@v3
        with:
          name: shell-completions
          path: ./target/completions/
          if-no-files-found: error
          retention-days: 7

  Build-CLI:
    name: Build the CLI binary
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal

      - name: Build Distributions
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.os == 'ubuntu-latest' }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: phylum-${{ matrix.target }}
          path: ./target/${{ matrix.target }}/release/phylum
          if-no-files-found: error
          retention-days: 7

  Build-Release-Artifacts:
    name: Build the release artifacts
    needs: [Generate-Completion-Files, Build-CLI]
    runs-on: ubuntu-latest
    steps:
      - name: Install host dependencies
        run: sudo apt install -yq zip

      - name: Checkout the repo
        uses: actions/checkout@master
        with:
          path: cli

      - name: Download release artifacts
        uses: actions/download-artifact@v3

      - name: Prep archives
        run: |
          for archive in phylum-*/;
          do
            archive=$(echo ${archive} | sed -e "s/\/$//")
            cp -R shell-completions ${archive}/completions
            cp cli/cli/src/install.sh ${archive}/install.sh
            chmod a+x ${archive}/phylum
            zip -r ${archive}.zip ${archive}
          done

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-archives
          path: phylum-*.zip
          if-no-files-found: error
          retention-days: 7

  Release:
    name: Create release from tag
    needs: Build-Release-Artifacts
    # Only run this job when pushing a tag
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Install host dependencies
        run: |
          sudo add-apt-repository -y ppa:dysfunctionalprogramming/minisign
          sudo apt update
          sudo apt install -yq minisign

      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-archives

      - name: Sign archives
        run: |
          echo -e $MINISIGN_KEY > minisign.key
          for archive in phylum-*.zip;
          do
            echo $MINISIGN_PASSWORD | minisign -Sm ${archive} -s minisign.key -t 'Phylum - the future of software supply chain security'
          done
        env:
          MINISIGN_KEY: ${{ secrets.MINISIGN_KEY }}
          MINISIGN_PASSWORD: ${{ secrets.MINISIGN_PASSWORD }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          # This check is already filtered down to only 'refs/tags/' and shouldn't "overmatch"
          prerelease: ${{ contains(github.ref, 'rc') }}
          fail_on_unmatched_files: true
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            phylum-*.zip
            phylum-*.zip.minisig
