# This is the workflow for building release artifacts.
# Optionally, creating a release with those artifacts is possible by pushing a tag.
---
name: Release

on:
  # Allow running this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  Generate-Completion-Files:
    name: Generate shell completion files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Generate shell completion files
        uses: actions-rs/cargo@v1
        with:
          command: xtask
          args: gencomp

      - name: Upload shell completions
        uses: actions/upload-artifact@v3
        with:
          name: shell-completions
          path: ./target/completions/
          if-no-files-found: error
          retention-days: 7

  Build-CLI:
    name: Build the CLI binary
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: [self-hosted, linux, arm64]
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: [self-hosted, macos, arm64]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal

      - name: Build Distributions
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: phylum-${{ matrix.target }}
          path: ./target/${{ matrix.target }}/release/phylum
          if-no-files-found: error
          retention-days: 7

  Build-Release-Artifacts:
    name: Build the release artifacts
    needs: [Generate-Completion-Files, Build-CLI]
    runs-on: ubuntu-latest
    steps:
      - name: Install host dependencies
        run: sudo apt install -yq zip

      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          path: cli

      - name: Download release artifacts
        uses: actions/download-artifact@v3

      - name: Prep archives
        run: |
          for archive in phylum-*/;
          do
            archive=$(echo ${archive} | sed -e "s/\/$//")
            cp -R shell-completions ${archive}/completions
            mkdir ${archive}/extensions
            for extension in npm poetry yarn
            do
              cp -R cli/extensions/${extension} ${archive}/extensions/${extension}
            done
            cp cli/cli/src/install.sh ${archive}/install.sh
            chmod a+x ${archive}/phylum
            zip -r ${archive}.zip ${archive}
          done

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-archives
          path: phylum-*.zip
          if-no-files-found: error
          retention-days: 7

  Release:
    name: Create release from tag
    needs: Build-Release-Artifacts
    # Only run this job when pushing a tag
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-archives

      - name: Sign archives
        run: |
          echo "$OPENSSL_KEY" > key.pem
          for archive in phylum-*.zip;
          do
            openssl dgst -sha256 -sign key.pem -out "${archive}.signature" "${archive}"
          done
        env:
          OPENSSL_KEY: ${{ secrets.OPENSSL_KEY }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          # This check is already filtered down to only 'refs/tags/' and shouldn't "overmatch"
          prerelease: ${{ contains(github.ref, 'rc') }}
          fail_on_unmatched_files: true
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            phylum-*.zip
            phylum-*.zip.signature

  Trigger:
    name: Trigger phylum-ci Docker image creation
    needs: Release
    # Don't trigger for pre-releases
    # NOTE: This is an instance where the expression syntax (`${{ }}`) is required for the `if` conditional,
    #       contrary to the GitHub workflow syntax documentation. Do not remove the expression syntax.
    if: ${{ !contains(github.ref, 'rc') }}
    # The `--fail-with-body` option in `curl` was added in v7.76.0, which is too
    # new for the `ubuntu-latest` runner that currently makes use of Ubuntu 20.04.
    # TODO: Update to `ubuntu-latest` once `ubuntu-22.04` support is stabilized.
    #       https://github.com/phylum-dev/cli/issues/467
    runs-on: ubuntu-22.04
    steps:
      - name: Trigger phylum-ci Docker image creation
        # Reference: https://docs.github.com/en/rest/repos/repos#create-a-repository-dispatch-event
        run: |
          curl \
            -X POST \
            --fail-with-body \
            --no-progress-meter \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_RELEASE_PAT }}" \
            -d "{\"event_type\":\"build-push-docker-images\",\"client_payload\":{\"CLI_version\":\"$GITHUB_REF_NAME\"}}" \
            https://api.github.com/repos/phylum-dev/phylum-ci/dispatches

  Update-Documentation:
    name: Update the documentation
    needs: Release
    # Don't trigger for pre-releases
    if: ${{ !contains(github.ref, 'rc') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Update v2-latest using rdme
        uses: readmeio/rdme@8.0.4
        with:
          rdme: docs ./docs --key=${{ secrets.README_API }} --version=2-latest
